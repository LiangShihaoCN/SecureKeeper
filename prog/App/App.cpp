/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors: Stefan Brenner, Colin Wulf
 */
#include <stdio.h>
#include <string.h>
#include <assert.h>

#include <unistd.h>
#include <pwd.h>
#define MAX_PATH FILENAME_MAX

#include "sgx_urts.h"
#include "App.h"
#include "Enclave_u.h"
#include <sgx_tcrypto.h>

#include <pthread.h>
#include <semaphore.h>

typedef struct _sgx_errlist_t {
	sgx_status_t err;
	const char *msg;
	const char *sug; /* Suggestion */
} sgx_errlist_t;

/* Error code returned by sgx_create_enclave */
static sgx_errlist_t sgx_errlist[] = { { SGX_ERROR_UNEXPECTED, "Unexpected error occurred.",
NULL }, { SGX_ERROR_INVALID_PARAMETER, "Invalid parameter.",
NULL }, { SGX_ERROR_OUT_OF_MEMORY, "Out of memory.",
NULL }, { SGX_ERROR_ENCLAVE_LOST, "Power transition occurred.",
		"Please refer to the sample \"PowerTransition\" for details." }, { SGX_ERROR_INVALID_ENCLAVE,
		"Invalid enclave image.",
		NULL }, { SGX_ERROR_INVALID_ENCLAVE_ID, "Invalid enclave identification.",
NULL }, { SGX_ERROR_INVALID_SIGNATURE, "Invalid enclave signature.",
NULL }, { SGX_ERROR_OUT_OF_EPC, "Out of EPC memory.",
NULL }, { SGX_ERROR_NO_DEVICE, "Invalid SGX device.",
		"Please make sure SGX module is enabled in the BIOS, and install SGX driver afterwards." }, {
		SGX_ERROR_MEMORY_MAP_CONFLICT, "Memory map conflicted.",
		NULL }, { SGX_ERROR_INVALID_METADATA, "Invalid enclave metadata.",
NULL }, { SGX_ERROR_DEVICE_BUSY, "SGX device was busy.",
NULL }, { SGX_ERROR_INVALID_VERSION, "Enclave version was invalid.",
NULL }, { SGX_ERROR_INVALID_ATTRIBUTE, "Enclave was not authorized.",
NULL }, { SGX_ERROR_ENCLAVE_FILE_ACCESS, "Can't open enclave file.",
NULL }, };

/* Check error conditions for loading enclave */
void print_error_message(sgx_status_t ret) {
	size_t idx = 0;
	size_t ttl = sizeof sgx_errlist / sizeof sgx_errlist[0];

	for (idx = 0; idx < ttl; idx++) {
		if (ret == sgx_errlist[idx].err) {
			if (NULL != sgx_errlist[idx].sug)
				printf("Info: %s\n", sgx_errlist[idx].sug);
			printf("Error: %s\n", sgx_errlist[idx].msg);
			break;
		}
	}

	if (idx == ttl)
		printf("Error: Unexpected error occurred.\n");
}

uint64_t initialize_enclave(void) {
	sgx_enclave_id_t eid = 0;

	/* Initialize the enclave:
	 *   Step 1: retrive the launch token saved by last transaction
	 *   Step 2: call sgx_create_enclave to initialize an enclave instance
	 *   Step 3: save the launch token if it is updated
	 */

	char token_path[MAX_PATH] = { '\0' };
	sgx_launch_token_t token = { 0 };
	sgx_status_t ret = SGX_ERROR_UNEXPECTED;
	int updated = 0;

	/* Step 1: retrive the launch token saved by last transaction */
	/* try to get the token saved in $HOME */
	const char *home_dir = getpwuid(getuid())->pw_dir;

	if (home_dir != NULL && (strlen(home_dir) + strlen("/") + sizeof(TOKEN_FILENAME) + 1) <= MAX_PATH) {
		/* compose the token path */
		strncpy(token_path, home_dir, strlen(home_dir));
		strncat(token_path, "/", strlen("/"));
		strncat(token_path, TOKEN_FILENAME, sizeof(TOKEN_FILENAME) + 1);
	} else {
		/* if token path is too long or $HOME is NULL */
		strncpy(token_path, TOKEN_FILENAME, sizeof(TOKEN_FILENAME));
	}

	FILE *fp = fopen(token_path, "rb");
	if (fp == NULL && (fp = fopen(token_path, "wb")) == NULL) {
		printf("Warning: Failed to create/open the launch token file \"%s\".\n", token_path);
	}

	if (fp != NULL) {
		/* read the token from saved file */
		size_t read_num = fread(token, 1, sizeof(sgx_launch_token_t), fp);
		if (read_num != 0 && read_num != sizeof(sgx_launch_token_t)) {
			/* if token is invalid, clear the buffer */
			memset(&token, 0x0, sizeof(sgx_launch_token_t));
			printf("Warning: Invalid launch token read from \"%s\".\n", token_path);
		}
	}

	/* Step 2: call sgx_create_enclave to initialize an enclave instance */
	/* Debug Support: set 2nd parameter to 1 */
	ret = sgx_create_enclave(ENCLAVE_FILENAME, SGX_DEBUG_FLAG, &token, &updated, &eid, NULL);
	if (ret != SGX_SUCCESS) {
		printf("SGX error Code %d.\n", ret);
		if (fp != NULL)
			fclose(fp);
		return -ret;
	}

	/* Step 3: save the launch token if it is updated */
	if (updated == FALSE || fp == NULL) {
		/* if the token is not updated, or file handler is invalid, do not perform saving */
		if (fp != NULL)
			fclose(fp);
		return eid;
	}

	/* reopen the file with write capablity */
	fp = freopen(token_path, "wb", fp);
	if (fp == NULL)
		return 0;
	size_t write_num = fwrite(token, 1, sizeof(sgx_launch_token_t), fp);
	if (write_num != sizeof(sgx_launch_token_t))
		printf("Warning: Failed to save launch token to \"%s\".\n", token_path);
	fclose(fp);
	return eid;
}

/* OCall functions */
void ocall_print(const char *str) {
	/* Proxy/Bridge will check the length and null-terminate
	 * the input string to prevent buffer overflow.
	 */
	printf("%s", str);
}

void hexDump(char *desc, void *addr, int len) {
	int i;
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) addr;

	// Output description if given.
	if (desc != NULL)
		printf("%s:\n", desc);

	// Process every byte in the data.
	for (i = 0; i < len; i++) {
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
			// Just don't print ASCII for the zeroth line.
			if (i != 0)
				printf("  %s\n", buff);

			// Output the offset.
			printf("  %04x ", i);
		}

		// Now the hex code for the specific character.
		printf(" %02x", pc[i]);

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
			buff[i % 16] = '.';
		else
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

	// Pad out last line if not exactly 16 characters.
	while ((i % 16) != 0) {
		printf("   ");
		i++;
	}

	// And print the final ASCII bit.
	printf("  %s\n", buff);
}

#ifdef __cplusplus
extern "C" {
#endif

int zpp_main(int argc, char *argv[], sgx_enclave_id_t global_eid);

uint64_t enclave_init() {
	uint64_t ret;
	ret = initialize_enclave();
	if (ret > 0) {
		//printf("Enclave initialized successfully with EID=%d.\n", ret);
	} else {
		printf("ret = %d.\n", ret);
		print_error_message((sgx_status_t)(ret * -1));
	}
	return ret;
}

#ifdef __cplusplus
}
#endif

void string2hex(const char input[], char buffer[], size_t size) {
	const char * pos = input;
	for (size_t count = 0; count < size && *pos != 0; count++) {
		sscanf(pos, "%2hhx", &buffer[count]);
		pos += 2;
	}
}

void injectRequest(const char input[], size_t len, long eid) {
	size_t buffersize = 8192;
	char buffer[buffersize];
	size_t psize = len;
	string2hex(input, buffer, buffersize);
	hexdump("input", buffer, psize);

	printf("Inject request: %lu Bytes. ", len);
	sgx_status_t ret = ecall_handle_input_from_client(eid, &psize, buffer, psize, buffersize, (int) eid);
	if (ret == SGX_SUCCESS) {
		printf("SUCCESS.\n");
	}
//	hexdump("output", buffer, psize);
}

void injectResponse(const char input[], size_t len, long eid) {
	size_t buffersize = 8192;
	char buffer[buffersize];
	size_t psize = len;
	string2hex(input, buffer, buffersize);
//	hexdump("input", buffer, psize);

	printf("Inject response: %lu Bytes. ", len);
	sgx_status_t ret = ecall_handle_input_from_zookeeper(eid, &psize, buffer, psize, buffersize, (int) eid);
	if (ret == SGX_SUCCESS) {
		printf("SUCCESS.\n");
	}
//	hexdump("output", buffer, psize);
}

// create /a test
const char createRequest[] =
		"14dcc13d01ce1c050938d471f87467c57359c237b79912cbbb32d4aae8c1683676bd5c810ac5277694643932e2d7b905c894e842ffd8e2bc9384b64cb4792e2d391ba4ab4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t createRequestLen = 69;
const char createResponse[] =
		"00000001000000000000000200000000000000282f62544266656a357662637671396f77424a513839345a4671554e794668424e4d6665553377415500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t createResponseLen = 60;

// long create (1024 B payload)
const char createLongRequest[] =
		"
size_t createLongRequestLen = 4172;
const char createLongResponse[] =
		"000000e500000000000000e600000000000000372f6a41586e574e55503742645474777047594347366642727a4c4a4250574c472d455852615650716d4761656c51324337677957674f4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t createLongResponseLen = 75;

// get /a
const char getRequest[] =
		"14dcc13e01ce1c000938d471f87467377b8ce043b4880d8798212ecb473803000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t getRequestLen = 31;
const char getResponse[] =
		"000000020000000000000002000000000000003460b9b2486b9ec0818d2b980e3222a7c05cab64647b6a519e5b631dafcb3eadc95cec11c6a5869d8e678ac2e2bd8e858434ddb2d30000000000000002000000000000000200000154f1be3a3d00000154f1be3a3d0000000000000000000000000000000000000000000000340000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t getResponseLen = 140;

// set /a hallo
const char setRequest[] =
		"14dcc13f01ce1c010938d471f87467c57358de33a8817d3444cc2b9132e73a806835d1957921ae4e65285a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t setRequestLen = 43;
const char setResponse[] =
		"000000030000000000000003000000000000000000000002000000000000000300000154f1be3a3d00000154f1be907e00000001000000000000000000000000000000000000003500000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t setResponseLen = 84;

// delete /a
const char deleteRequest[] =
		"14dcc13801ce1c060938d471f874983a8ca2a6b1b95f322600e3ecaacde31732a814000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t deleteRequestLen = 34;
const char deleteResponse[] =
		"00000004000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t deleteResponseLen = 30;

// ls /
const char lsRequest[] =
		"14dcc13a01ce1c0c0938d472f815ec7d220ae817d0d67d9d8b0c8659b2fa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t lsRequestLen = 30;
const char lsResponse[] =
		"0000000600000000000000040000000000000001000000097a6f6f6b656570657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
size_t lsResponseLen = 33;

long eid;

void all(long eid) {
	// create
	printf("create.\n");
	injectRequest(createRequest, createRequestLen, eid);
	injectResponse(createResponse, createResponseLen, eid);

	// get
	printf("get.\n");
	injectRequest(getRequest, getRequestLen, eid);
	injectResponse(getResponse, getResponseLen, eid);

	// set
	printf("set.\n");
	injectRequest(setRequest, setRequestLen, eid);
	injectResponse(setResponse, setResponseLen, eid);

	// delete
	printf("delete.\n");
	injectRequest(deleteRequest, deleteRequestLen, eid);
	injectResponse(deleteResponse, deleteResponseLen, eid);

	// ls
	printf("ls.\n");
	injectRequest(lsRequest, lsRequestLen, eid);
	injectResponse(lsResponse, lsResponseLen, eid);

	// create long
	printf("create 4KB.\n");
	injectRequest(createLongRequest, createLongRequestLen, eid);
	injectResponse(createLongResponse, createLongResponseLen, eid);
}

typedef enum types {
	create, get, set, del, ls, lng
} types_t;

#define REQNUM 200
sem_t sem;

void responses(types_t type) {
	for (int i = 0; i < REQNUM; ++i) {

		sem_wait(&sem);

		switch (type) {
		case create:
			injectResponse(createResponse, createResponseLen, eid);
			break;
		case get:
			injectResponse(getResponse, getResponseLen, eid);
			break;
		case set:
			injectResponse(setResponse, setResponseLen, eid);
			break;
		case del:
			injectResponse(deleteResponse, deleteResponseLen, eid);
			break;
		case ls:
			injectResponse(lsResponse, lsResponseLen, eid);
			break;
		case lng:
			injectResponse(createLongResponse, createLongResponseLen, eid);
			break;
		}
	}
}

void requests(types_t type) {
	for (int i = 0; i < REQNUM; ++i) {
		switch (type) {
		case create:
			injectRequest(createRequest, createRequestLen, eid);
			break;
		case get:
			injectRequest(getRequest, getRequestLen, eid);
			break;
		case set:
			injectRequest(setRequest, setRequestLen, eid);
			break;
		case del:
			injectRequest(deleteRequest, deleteRequestLen, eid);
			break;
		case ls:
			injectRequest(lsRequest, lsRequestLen, eid);
			break;
		case lng:
			injectRequest(createLongRequest, createLongRequestLen, eid);
			break;
		}

		sem_post(&sem);
	}
}

void threaded() {
	pthread_t t1, t2;
	printf("starting threads.\n");
	sem_init(&sem, 0, 0);
	pthread_create(&t1, NULL, (void*(*)(void*))requests, (void*)lng);
	pthread_create(&t2, NULL, (void*(*)(void*))responses, (void*)lng);
	pthread_join(t1, NULL);
	pthread_join(t2, NULL);
	sem_destroy(&sem);
	printf("thread joined.\n");
}

int SGX_CDECL main(int argc, char *argv[])
{
	// init enclave
	printf("Initialize enclave ...\n");
	eid = enclave_init();
	if (eid < 0) {
		printf("error during enclave init, eid=%ld.\n", eid);
		abort();
	}

	// injection
//	printf("All captured buffers\n");
//	all(eid);

// threaded
	printf("Threaded requests, responses.\n");
	threaded(); // max. 260KB

	return 0;
}

